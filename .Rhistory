on.exit(dbDisconnect(conn), add = TRUE)
dbGetQuery(conn, paste0(str_sql, " LIMIT ", input$nrows, ";"))
library(shiny)
library(leaflet)
library(tidyr)
library(dplyr)
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
dbGetQuery(conn, "SELECT * FROM policies")
conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <-dbGetQuery(conn, "SELECT * FROM policies")
partisanship.df <-dbGetQuery(conn, "SELECT * FROM partisanship")
states.df <-dbGetQuery(conn, "SELECT * FROM states")
votes.df <-dbGetQuery(conn, "SELECT * FROM votes")
conn = postgres_conn
postgres_conn<- dbConnect(
RPostgres::PostgreSQL,
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <-dbGetQuery(conn, "SELECT * FROM policies")
partisanship.df <-dbGetQuery(conn, "SELECT * FROM partisanship")
states.df <-dbGetQuery(conn, "SELECT * FROM states")
votes.df <-dbGetQuery(conn, "SELECT * FROM votes")
conn = postgres_conn
str_sql = postgres_sql
on.exit(dbDisconnect(conn), add = TRUE)
# Run the application
shinyApp(ui = ui, server = server)
on.exit(dbDisconnect(conn), add = TRUE)
#TABLES JOINED#
df <- merge(policies.df,partisanship.df,states.df,votes.df)
#TABLES JOINED#
df= merge('policies.df','partisanship.df','states.df','votes.df')
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <- dbGetQuery(conn, "SELECT * FROM policies")
partisanship.df <- dbGetQuery(conn, "SELECT * FROM partisanship")
states.df <-dbGetQuery(conn, "SELECT * FROM states")
votes.df <-dbGetQuery(conn, "SELECT * FROM votes")
dbDisconnect(conns)
dbDisconnect(conn)
#TABLES JOINED#
df <- merge(policies.df,partisanship.df,states.df,votes.df)
#TABLES JOINED#
df <- merge("policies.df","partisanship.df", "states.df", "votes.df")
View(partisanship.df)
df <- merge("policies.df","partisanship.df", "states.df", "votes.df")
#TABLES JOINED#
merge_df <- merge(policies.df, partisanship.df, by = "policy_ID")
merge_df <- merge(merged_df, states.df, by = "state_ID")
merge_df <- merge(merged_df, votes.df, by = "proposal_ID")policy_ID, proposal_name, policy_description, party_ID, party_name, state_ID, proposal_ID, policy_stance, SupportPercent,
# Defining UI
ui <- fluidPage(
#### Favicon ####
tags$head(
tags$link(rel = "shortcut icon", href = "C:\\Users\\Leiram\\Downloads\\policyicon.jpg"),
### biblio js###
tags$link(rel="stylesheet", type = "text/css",
href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"),
tags$link(rel="stylesheet", type = "text/css",
href = "https://fonts.googleapis.com/css?family=Trirong")
),
#### HEADER ####
class="header"(
div(style="padding: 1px 0px; width: '100%'",
titlePanel(
title="Policy Portrait", position= "center", windowTitle = "Policy Portrait- Exploring Policy Proposals, Public Opinion, and Partisanship",
position="center"
)
)
),
#### LOGO ####
list(tags$head(HTML('<link rel="icon", href="C:\\Users\\Leiram\\Downloads\\policyicon.jpg",
type="image/jpg" />'))
),
##NAVBAR
navbarPage("POLICY PORTRAIT",
title = div(
img(src ="C:\\Users\\Leiram\\Downloads\\policyicon.jpg",
height = "80px"),
position= "fixed-top",
style = "padding-left:100px;"
),
id = "navbar",
selected = "home",
theme = "styles.css",
fluid = TRUE,
tabPanel("Home",icon=icon("home"),
#HOME PAGE CONTENT
h2("Welcome to PolicyPortrait Database"),
p("Click on the tabs above, to explote different sections.")
),
tabPanel("Policy Proposals", icon = icon("fa-pencil", style='font-size:48px;color:red'),
#Policy Proposal Content
h2("Policy Proposals"),
),
tabPanel("Partisanship", icon=icon("users"),
#PARTISANSHIP DATA
),
tabPanel("Public Opinion", icon=icon("quote-right"),
)
)
)
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <- dbGetQuery(conn, "SELECT * FROM policies")
partisanship.df <- dbGetQuery(conn, "SELECT * FROM partisanship")
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <- dbGetQuery(conn, "SELECT * FROM policies")
dbListTables(conn)
library(shiny)
library(leaflet)
library(tidyr)
library(dplyr)
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <- dbGetQuery(conn, "SELECT * FROM policies")
partisanship.df <- dbGetQuery(conn, "SELECT * FROM partisanship")
states.df <-dbGetQuery(conn, "SELECT * FROM states")
votes.df <-dbGetQuery(conn, "SELECT * FROM votes")
View(department_df)
View(partisanship.df)
View(policies.df)
View(states.df)
View(votes.df)
library(shiny)
library(leaflet)
library(tidyr)
library(dplyr)
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
postgres_conn<- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
postgres_conn <-dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
postgres_conn <- dbConnect(
RPostgreSQL::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
postgres_conn <- dbConnect(
RPostgreSQL::PostgreSQL(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
postgres_conn <- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
postgres_conn <- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
library(shiny)
library(leaflet)
library(tidyr)
library(dplyr)
# Data Connection
db= 'PolicyPortrait'
db_host= '127.0.0.1'
db_port= 5433
db_user= 'postgres'
db_pass= 'KpmtZ8144122'
postgres_conn <- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
conn <- dbConnect(
RPostgres::Postgres(),
dbname=db,
host=db_host,
port=db_port,
user=db_user,
password= db_pass
)
dbListTables(conn)
policies.df <-dbGetQuery(conn, "SELECT * FROM policies")
partisanship.df <-dbGetQuery(conn, "SELECT * FROM partisanship")
states.df <-dbGetQuery(conn, "SELECT * FROM states")
votes.df <-dbGetQuery(conn, "SELECT * FROM votes")
#TABLES JOINED#
merge_df <- merge(policies.df, partisanship.df, by = "policy_ID")
df <- (merge(policies.df, partisanship.df, by = "policy_ID"))
df <- merge(policies.df, partisanship.df, by = "policy_ID")
df <- merge(policies.df, partisanship.df, by = "policy_ID"
merge_df <-merge(df, states.df, by = "state_ID")
merged_df <- merge(policies.df, partisanship.df, by = "policy_ID",
policies_df <-dbGetQuery(conn, "SELECT * FROM policies")
partisanship_df <-dbGetQuery(conn, "SELECT * FROM partisanship")
states_df <-dbGetQuery(conn, "SELECT * FROM states")
dbListTables(conn)
policies_df <-dbGetQuery(conn, "SELECT * FROM policies")
partisanship_df <-dbGetQuery(conn, "SELECT * FROM partisanship")
states_df <-dbGetQuery(conn, "SELECT * FROM states")
votes_df <-dbGetQuery(conn, "SELECT * FROM votes")
merged_df <- merge(policies_df, partisanship_df)
merged_df <- merge(merged_df, states_df)
merged_df <- merge(merged_df, votes_df)
select_df <- merged_df [c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female")]
print(colnames(merged_df))
all_columns_exist <- all(c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female") %in% colnames(merged_df))
select_df <- merged_df[c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female")]
merged_df <- merge(merged_df, votes_df)
print(colnames(merged_df))
all_columns_exist <- all(c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female") %in% colnames(merged_df))
if (all_columns_exist){
select_df <- merged_df[c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female")]
select_df <- merged_df[c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female")]
dbDisconnect(conn)
# Defining UI
ui <- fluidPage(
#### Favicon ####
tags$head(
tags$link(rel = "shortcut icon", href = "C:\\Users\\Leiram\\Downloads\\policyicon.jpg"),
### biblio js###
tags$link(rel="stylesheet", type = "text/css",
href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"),
tags$link(rel="stylesheet", type = "text/css",
href = "https://fonts.googleapis.com/css?family=Trirong")
),
#### HEADER ####
class="header"(
div(style="padding: 1px 0px; width: '100%'",
titlePanel(
title="Policy Portrait", position= "center", windowTitle = "Policy Portrait- Exploring Policy Proposals, Public Opinion, and Partisanship",
position="center"
)
)
),
#### LOGO ####
list(tags$head(HTML('<link rel="icon", href="C:\\Users\\Leiram\\Downloads\\policyicon.jpg",
type="image/jpg" />'))
),
##NAVBAR
navbarPage("POLICY PORTRAIT",
title = div(
img(src ="C:\\Users\\Leiram\\Downloads\\policyicon.jpg",
height = "80px"),
position= "fixed-top",
style = "padding-left:100px;"
),
id = "navbar",
selected = "home",
theme = "styles.css",
fluid = TRUE,
tabPanel("Home",icon=icon("home"),
#HOME PAGE CONTENT
h2("Welcome to PolicyPortrait Database"),
p("Click on the tabs above, to explote different sections.")
),
tabPanel("Policy Proposals", icon = icon("fa-pencil", style='font-size:48px;color:red'),
#Policy Proposal Content
h2("Policy Proposals"),
),
tabPanel("Partisanship", icon=icon("users"),
#PARTISANSHIP DATA
),
tabPanel("Public Opinion", icon=icon("quote-right"),
)
)
)
#Defining Shiny Server
server <- function(input, output, session)
# Run the application
shinyApp(ui = ui, server = server)
#Defining Shiny Server
server <- function(input, output, session){
##-- HOME ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\app.R", local = TRUE)
##-- POLICIES ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\policies.csv", local = TRUE)
##-- PARTISANSHIP ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\partisanship.csv", local = TRUE)
##-- STATES ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\states.csv", local = TRUE)
##-- VOTES ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\votes.csv", local = TRUE)
})
#Defining Shiny Server
server <- function(input, output, session){
##-- HOME ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\app.R", local = TRUE)
##-- POLICIES ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\policies.csv", local = TRUE)
##-- PARTISANSHIP ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\partisanship.csv", local = TRUE)
##-- STATES ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\states.csv", local = TRUE)
##-- VOTES ----
source("C:\\Users\\Leiram\\Documents\\PolicyPortrait\\votes.csv", local = TRUE)
}
# Run the application
shinyApp(ui = ui, server = server)
source("~/PolicyPortrait/app.R")
runApp('PolicyPortrait')
library(RPostgreSQL)
library(RSQLite)
library(DBI)
postgre_con <- dbConnect(RPostgres::Postgres(),
dbname = 'PolicyTrait', # name of the database
host = '127.0.0.1',
port = 5433,
user = 'postgres',
password = 'KpmtZ8144122') # PostgreSQL/pgAdmin password
postgre_con <- dbConnect(RPostgres::Postgres(),
dbname = 'PolicyPortrait', # name of the database
host = '127.0.0.1',
port = 5433,
user = 'postgres',
password = 'KpmtZ8144122') # PostgreSQL/pgAdmin password
policies_db <-dbGetQuery(postgre_con, "SELECT * FROM policies")
partisanship_db <-dbGetQuery(conn, "SELECT * FROM partisanship")
states_db <-dbGetQuery(conn, "SELECT * FROM states")
votes_db <-dbGetQuery(conn, "SELECT * FROM votes")
#MERGING ALL DATAFRAMES
merged_db <- merge(policies_db, partisanship_db)
merged_db <- merge(merged_db, states_db)
merged_db <- merge(merged_db, votes_db)
print(colnames(merged_db))
all_columns_exist <- all(c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female") %in% colnames(merged_df))
if (all_columns_exist){
select_df <- merged_df[c("policy_ID", "proposal_name", "policy_description",
"party_ID", "party_name", "state_ID", "proposal_ID",
"policy_stance", "SupportPercent", "state_name",
"casualties_py", "active_policies", "state_title",
"policy_strength", "age_18_30", "age_30_45", "male",
"female")]
# use RSQLite package to prepare a .db file
sqlite_conn <- dbConnect(RSQLite::SQLite(), dbname = "PolicyPortrait.db")
# use RSQLite package to prepare a .db file
sqlite_conn <- dbConnect(RSQLite::SQLite(), dbname = "PolicyPortrait.db")
for (table_name in tables$tablename) {
message(sprintf("Copying table: %s", table_name))
# Read data from PostgreSQL
query <- sprintf("SELECT * FROM %s", table_name)
data <- dbGetQuery(postgre_con, query)
# Write data to SQLite
dbWriteTable(sqlite_conn, table_name, data, overwrite = TRUE, row.names = FALSE)
}
dbDisconnect(postgre_con)
dbDisconnect(sqlite_conn)
source("~/PolicyPortrait/connection.R")
runApp('PolicyPortrait')
